install.packages("devtools")
devtools::load_all()
install.packages("roxygen2")
install.packages("knitr")
source("~/earthquaker/R/Earthquake_DataClean.R", echo=TRUE)
devtools::document()
install.packages('rmarkdown')
install.packages('rmarkdown')
install.packages("rmarkdown")
devtools::document()
library(rmarkdown)
install.packages("rmarkdown", dependencies = TRUE)
install.packages("rmarkdown", dependencies = TRUE)
install.packages("tinytex")
library(rmarkdown)
load(rmarkdown)
devtools::document()
library("roxygen2")
devtools::document()
updateR()
install.packages("installr")
library(installr)
updateR()
install.packages('rmarkdown')
library(roxygen2)
install.packages("roxygen2")
library(roxygen2)
library(rmarkdown)
install.packages("devtools")
devtools::document()
install.packages("ggplot2","scales", "readr", "leaflet")
install.packages("ggplot2")
install.packages("tidyr")
install.packages("tidyr")
install.packages("readr")
install.packages("scales")
install.packages("leaflet")
install.packages("stringr")
devtools::document()
devtools::document()
devtools::document()
?eq_location_clean
?eq_clean_data
?geom_timeline_label
devtools::use_vignette("Earthquake_vignette")
library(knitr)
devtools::use_vignette("Earthquake_vignette")
devtools::use_vignette("earthquaker")
usethis::use_vignette("earthquaker")
library(readr)
library(dplyr)
library(tidyr)
library(lubridate)
library(stringr)
eq_rawdata = readr::read_delim("D:/DataAnalysis/R/Coursera/5_Capstone/earthquakes_2021.tsv", delim = "\t")
# Function to clean location names, separating from country names that will be used for annotation
eq_location_clean <- function(dataframe){
d1 <- dataframe
d1 <- d1 %>%
separate('Location Name',c("Country", "Location_Name"),": ") %>%
mutate(Country = str_trim(str_to_title(Country, locale = "en"))) %>%
mutate(Location_Name = str_trim(str_to_title(Location_Name, locale = "en")))
return(d1)
}
# Function to clean raw data set to prepare for the analysis _____________________________________
eq_clean_data <- function(dataframe){
d2 <- dataframe
d2 <- d2 %>%
dplyr::mutate(Latitude= as.numeric(Latitude)) %>%
dplyr::mutate(Longitude= as.numeric(Longitude)) %>%
dplyr::mutate(Date = lubridate::make_date(Year, Mo, Dy)) %>%
dplyr::arrange(desc(Mag)) %>%
eq_location_clean()
return(d2)
}
eq_final = eq_rawdata %>%
eq_clean_data() %>%
select(c("Country", "Location_Name", "Date", "Mag", "Latitude", "Longitude", "Deaths")) %>%
filter(Country %in% c("India", "China", "Mexico")) %>%
filter(Date>="2000-01-01" & Date<"2010-12-31")
library(readr)
library(dplyr)
library(tidyr)
library(lubridate)
library(stringr)
library(ggplot2)
library(grid)
GeomTimeline <- ggproto("GeomTimeline", Geom,
required_aes = c("x"), # optional y aesthetic
default_aes = ggplot2::aes(y = 1,
alpha = 0.5,
fill = "grey",
colour = "grey",
size = 1.5,
shape = 21,
stroke = 1),
draw_key = ggplot2::draw_key_point,
# For points across a line for each level or country
draw_group = function(data, panel_scales, coord) {
coords <- coord$transform(data, panel_scales)
# Creating a pointsGrob with pch 21 which is a filled circle.
points <- grid::pointsGrob(coords$x, coords$y,
pch = coords$shape,
size = grid::unit(coords$size/4, "lines"),
gp = gpar(col = alpha(coords$colour, coords$alpha),
fill = alpha(coords$colour, coords$alpha)
)
)
# Creating a lineGrob
line <- grid::segmentsGrob(
x0 = 0, y0 = coords$y,
x1 = 1, y1 = coords$y,
gp = gpar(col="grey", alpha=0.5, size=1)
)
grid::gList(points, line)
}
)
geom_timeline <- function(mapping=NULL, data=NULL,
stat="identity", position="identity", na.rm=FALSE,
show.legend=NA,
inherit.aes=TRUE, ...) {
ggplot2::layer(
geom = GeomTimeline,
mapping = mapping,
data = data,
stat = stat,
position = position,
show.legend = show.legend,
inherit.aes = inherit.aes,
params = list(na.rm=na.rm, ...)
)
}
# Building a new Stat to filter n_max datapoints for label Geom ___________________________________________________
StatTLL <- ggproto("StatTLL", Stat,
required_aes = c("x", "y"),
compute_group = function(data, scales, n_max) {
data <- data %>% head(n_max)
}
)
stat_tll <- function(mapping = NULL, data = NULL, geom = "segment",
position = "identity", na.rm = FALSE,
show.legend = NA, inherit.aes = TRUE, n_max = NULL, ...) {
ggplot2::layer(
stat = StatTLL, data = data, mapping = mapping, geom = geom,
position = position, show.legend = show.legend, inherit.aes = inherit.aes,
params = list(n_max = n_max, na.rm = na.rm, ...)
)
}
# Building a new Geom to plot n_max labels on earthquake timelines plot _____________________________________________
GeomTimelinelabel <- ggproto("GeomTimelinelabel", Geom,
required_aes = c("x"),
default_aes = aes(size = 15, alpha = 0.7, shape = 21, color = "blue"),
draw_key = draw_key_point,
draw_panel = function(data, panel_scales, coord) {
coords <- coord$transform(data, panel_scales)
# Creating a segmentGrob for the leader line for select points to be labelled
lines <- grid::segmentsGrob(x0 = coords$x,
y0 = coords$y,
x1 = coords$x,
y1 = coords$y + 0.1,
default.units = "npc",
gp = grid::gpar(col =      "grey",
alpha =    coords$alpha,
fontsize = coords$size,
lwd =      coords$stroke))
# Creating a textGrob fto label the selected points
texts <- textGrob(label = coords$label,
x = coords$x,         # X axis coordinates same as point
y = coords$y + 0.12,  # position slightly above the line
just = "left",        # Left justified text
rot = 45,             # Text rotation
check.overlap = TRUE, # Only display one of the overlapped text
default.units = "npc",# Default units
gp = grid::gpar(col =      "steelblue",
fontsize = 10,
lwd =      2))
grid::gTree(children = grid::gList(lines, texts))
}
)
geom_timeline_label <- function(mapping = NULL, data = NULL, stat = "identity",
position = "identity", na.rm = FALSE,
show.legend = NA, inherit.aes = TRUE, n_max=NULL,
...) {
ggplot2::layer(
geom = GeomTimelinelabel, mapping = mapping,
data = data, stat = StatTLL, position = position,
show.legend = show.legend, inherit.aes = inherit.aes,
params = list(n_max = n_max,  na.rm = na.rm, ...)
)
}
C3 <- eq_rawdata %>%
eq_clean_data() %>%
select(c("Country", "Location_Name", "Date", "Mag", "Latitude", "Longitude", "Deaths")) %>%
filter(Country %in% c("India", "China", "Mexico")) %>%
filter(Date>="2000-01-01" & Date<"2010-12-31") %>%
ggplot(aes(x=Date,
y=Country,
color = Deaths,
size = Mag,
label=Location_Name)) +
geom_timeline() +
geom_timeline_label(n_max=5) +
scale_size_continuous(name = "Richter scale value", breaks = c(2,4,6)) +
scale_color_continuous(name = "# Deaths") +
theme_bw() +
theme(legend.position = "right")+
labs(title = "Earthquakes Summary")
C3
C3 <- eq_rawdata %>%
eq_clean_data() %>%
select(c("Country", "Location_Name", "Date", "Mag", "Latitude", "Longitude", "Deaths")) %>%
filter(Country %in% c("India", "China", "Mexico")) %>%
filter(Date>="2000-01-01" & Date<"2010-12-31") %>%
ggplot(aes(x=Date,
y=Country,
color = Deaths,
size = Mag,
label=Location_Name)) +
geom_timeline() +
#geom_timeline_label(n_max=5) +
scale_size_continuous(name = "Richter scale value", breaks = c(2,4,6)) +
scale_color_continuous(name = "# Deaths") +
theme_bw() +
theme(legend.position = "right")+
labs(title = "Earthquakes Summary")
C3
C3 <- eq_rawdata %>%
eq_clean_data() %>%
select(c("Country", "Location_Name", "Date", "Mag", "Latitude", "Longitude", "Deaths")) %>%
filter(Country %in% c("India", "China", "Mexico")) %>%
filter(Date>="2000-01-01" & Date<"2010-12-31") %>%
ggplot(aes(x=Date,
y=Country,
color = Deaths,
size = Mag,
label=Location_Name)) +
geom_timeline() +
geom_timeline_label(n_max=5) +
scale_size_continuous(name = "Richter scale value", breaks = c(2,4,6)) +
scale_color_continuous(name = "# Deaths") +
theme_bw() +
theme(legend.position = "right")+
labs(title = "Earthquakes Summary")
C3
library(readr)
library(dplyr)
library(tidyr)
library(lubridate)
library(stringr)
library(ggplot2)
library(grid)
library(leaflet)
eq_create_label<-function(df){
# check if the correct columns are present
all_columns <- colnames(df)
stopifnot(any("Location_Name" %in% all_columns),
any("Mag" %in% all_columns),
any("Deaths" %in% all_columns))
len <- length(df$Location_Name)
locations <- df$Location_Name
magnitude <- df$Mag             # Magnitude is under "Mag field name in the dataset
deaths <- df$Deaths
ptxt <- rep("", len)
for(i in 1:len){
txt <- paste0("<b>Location: </b>", locations[i], "</br>",
"<b>Magnitude: </b>", magnitude[i], "</br>",
"<b>Total Deaths: </b>", deaths[i])
ptxt[i] <- txt
}
return(ptxt)
}
# Function to create map with earthquake epicenter points _____________________________________
eq_map <- function(eq_data_clean = NULL, annot_col = "Date"){
# check if the correct columns are present
all_columns <- colnames(eq_data_clean)
stopifnot(any("Date" %in% all_columns),
any("Latitude" %in% all_columns),
any("Longitude" %in% all_columns),
any("Mag" %in% all_columns))
# check to see if invalid column are provided - print message and default to DATE
if(!(any(annot_col %in% all_columns))) {
warning("Invalid Column - DATE Displayed")
annot_col = "Date"
}
# create a leaflet map
Map1 <- leaflet() %>%
leaflet::addTiles() %>%
leaflet::addCircleMarkers(data = eq_data_clean,
lng = ~ Longitude,
lat = ~ Latitude,
radius = ~ Mag,
weight = 1,
fillOpacity = 0.2,
popup = ~ paste0(get(annot_col)))
return(Map1)
}
M3 = eq_final %>%
#mutate(popup_text = eq_create_label(.)) %>%
eq_map(annot_col = "Date")
M3
M3 = eq_final %>%
mutate(popup_text = eq_create_label(.)) %>%
eq_map(annot_col = "Date")
M3
M3 = eq_final %>%
mutate(popup_text = eq_create_label(.)) %>%
eq_map(annot_col = "popup-text")
M3
M3 = eq_final %>%
mutate(popup_text = eq_create_label(.)) %>%
eq_map(annot_col = "popup_text")
M3
devtools::build()
devtools::build()
use_readme_rmd(open = rlang::is_interactive())
devtools::document()
use_readme_rmd()
use_readme_rmd
install.packages(c("devtools", "roxygen2", "testthat", "knitr","usethis","pkgdown"))
install.packages(c("devtools", "roxygen2", "testthat", "knitr", "usethis", "pkgdown"))
usethis::use_gpl3_license(name = "az")
usethis::use_gpl3_license(name = "earthquaker")
usethis::use_gpl3_license(name = "earthquaker.RProj")
usethis::use_gpl2_license(name = "earthquaker.RProj")
usethis::use_gpl3_license(name = "earthquaker")
usethis::use_readme_rmd()
usethis::use_gpl3_license(name = "amol")
usethis::use_gpl3_license(name = "GPL-3")
install.packages(c("dplyr","stringr","readr","tidyr","lubridate","ggplot2","grid","leaflet"))
install.packages(c("dplyr", "stringr", "readr", "tidyr", "lubridate", "ggplot2", "grid", "leaflet"))
install.packages(c("dplyr", "stringr", "readr", "tidyr", "lubridate", "ggplot2", "grid", "leaflet"))
install.packages(c("dplyr", "stringr", "readr", "tidyr", "lubridate", "ggplot2", "grid", "leaflet"))
install.packages(c("dplyr", "stringr", "readr", "tidyr", "lubridate", "ggplot2", "grid", "leaflet"))
install.packages(c("dplyr", "stringr", "readr", "tidyr", "lubridate", "ggplot2", "grid", "leaflet"))
install.packages(c("dplyr", "stringr", "readr", "tidyr", "lubridate", "ggplot2", "grid", "leaflet"))
